import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiohttp import web

API_TOKEN = '7355204062:AAGxmhwKAAsO3kED8WcbprirmptgV51aOpE'
CHANNEL_USERNAME = '@film_now55'

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ö–æ–¥—ã —Ñ–∏–ª—å–º–æ–≤
movie_codes = {
    '/001': 'üé¨ –ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤',
    '/002': 'üé¨ –í–æ –≤—Å–µ —Ç—è–∂–∫–∏–µ',
    '/003': 'üé¨ –ò–ª–ª—é–∑–∏—è –æ–±–º–∞–Ω–∞',
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == '/start')
async def cmd_start(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text='üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_subscription')
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–•–û–ß–ï–®–¨ –£–ó–ù–ê–¢–¨ –ù–ê–ó–í–ê–ù–ò–ï –§–ò–õ–¨–ú–ê/–°–ï–†–ò–ê–õ–ê –ü–û –ö–û–î–£?\n\n"
        "üîπ –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª\n"
        "üëâ https://t.me/+bzdNraniZOA3MjY6\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=kb.as_markup()
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
@dp.callback_query(F.data == 'check_subscription')
async def check_subs(callback: CallbackQuery):
    user_id = callback.from_user.id
    if await check_subscription(user_id):
        await callback.message.answer(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /001), –∏ —è –ø—Ä–∏—à–ª—é –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ üé¨"
        )
    else:
        await callback.message.answer(
            "‚ùó –¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!\n"
            "üîπ –ü–æ–¥–ø–∏—à–∏—Å—å üëâ https://t.me/+bzdNraniZOA3MjY6\n"
            "–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞"
        )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏)
@dp.message(F.text.startswith('/'))
async def handle_code(message: Message):
    user_id = message.from_user.id
    subscribed = await check_subscription(user_id)

    if not subscribed:
        await message.answer(
            "‚ùó –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!\n"
            "üëâ https://t.me/+bzdNraniZOA3MjY6\n"
            "–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏ /start –∏ –ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫—É."
        )
        return

    code = message.text.strip()
    if code in movie_codes:
        await message.answer(movie_codes[code])
    else:
        await message.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")

# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot
async def handle(request):
    return web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üëç")

def keep_alive():
    app = web.Application()
    app.add_routes([web.get("/", handle)])
    runner = web.AppRunner(app)

    async def start():
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", 8080)
        await site.start()

    asyncio.create_task(start())

# –ó–∞–ø—É—Å–∫
async def main():
    keep_alive()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
